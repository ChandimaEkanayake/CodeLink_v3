{
  "a1b2c3d": [
    {
      "id": "a1b2c3d_c1",
      "filePath": "README.md",
      "changeType": "modified",
      "diff": "@@ -1,5 +1,15 @@\n# PyShop - Python eCommerce Platform\n\n-A simple eCommerce platform built with Django.\n+A comprehensive eCommerce platform built with Django and Python.\n+\n+## Deployment Instructions\n+\n+### Prerequisites\n+- Python 3.9+\n+- PostgreSQL 13+\n+- Redis for caching\n+\n+### Production Deployment\n+1. Set up environment variables (see `.env.example`)\n+2. Run `python manage.py migrate` to set up the database\n+3. Run `python manage.py collectstatic` for static files\n+4. Configure Gunicorn and Nginx (see `deployment/` folder)"
    },
    {
      "id": "a1b2c3d_c2",
      "filePath": "deployment/nginx.conf",
      "changeType": "added",
      "diff": "@@ -0,0 +1,25 @@\n+# Nginx configuration for PyShop\n+\n+server {\n+    listen 80;\n+    server_name pyshop.example.com;\n+    \n+    location = /favicon.ico { \n+        access_log off; \n+        log_not_found off; \n+    }\n+    \n+    location /static/ {\n+        root /var/www/pyshop;\n+    }\n+    \n+    location /media/ {\n+        root /var/www/pyshop;\n+    }\n+    \n+    location / {\n+        proxy_pass http://unix:/run/gunicorn.sock;\n+        proxy_set_header Host $host;\n+        proxy_set_header X-Real-IP $remote_addr;\n+    }\n+}"
    }
  ],
  "q4r5s6t": [
    {
      "id": "q4r5s6t_c1",
      "filePath": "pyshop/payments/views.py",
      "changeType": "modified",
      "diff": "@@ -1,10 +1,45 @@\nfrom django.shortcuts import render, redirect\nfrom django.conf import settings\n+from django.http import JsonResponse\n+from django.views.decorators.csrf import csrf_exempt\n+import stripe\n+import json\n+from .models import Payment\n+from orders.models import Order\n+\n+stripe.api_key = settings.STRIPE_SECRET_KEY\n\ndef payment_process(request):\n-    # TODO: Implement payment processing\n-    return render(request, 'payments/process.html')\n+    order_id = request.session.get('order_id')\n+    if not order_id:\n+        return redirect('shop:product_list')\n+    \n+    try:\n+        order = Order.objects.get(id=order_id)\n+    except Order.DoesNotExist:\n+        # Handle the case where the order does not exist\n+        return redirect('shop:product_list')  # Or display an error message\n+    \n+    if request.method == 'POST':\n+        # Create a payment intent\n+        try:\n+            intent = stripe.PaymentIntent.create(\n+                amount=int(order.get_total_cost() * 100),\n+                currency='usd',\n+                metadata={'order_id': order.id}\n+            )\n+            \n+            # Create a payment record\n+            Payment.objects.create(\n+                order=order,\n+                stripe_payment_id=intent.id,\n+                amount=order.get_total_cost(),\n+                status='pending'\n+            )\n+            \n+            return JsonResponse({'clientSecret': intent.client_secret})\n+        except Exception as e:\n+            return JsonResponse({'error': str(e)}, status=400)\n+    \n+    return render(request, 'payments/process.html', {\n+        'order': order,\n+        'client_id': settings.STRIPE_PUBLISHABLE_KEY,\n+    })\n\ndef payment_done(request):\n    return render(request, 'payments/done.html')\n@@ -12,3 +47,25 @@ def payment_done(request):\ndef payment_canceled(request):\n    return render(request, 'payments/canceled.html')\n\n+@csrf_exempt\n+def stripe_webhook(request):\n+    payload = request.body\n+    sig_header = request.META.get('HTTP_STRIPE_SIGNATURE')\n+    \n+    try:\n+        event = stripe.Webhook.construct_event(\n+            payload, sig_header, settings.STRIPE_WEBHOOK_SECRET\n+        )\n+    except ValueError:\n+        return JsonResponse({'error': 'Invalid payload'}, status=400)\n+    except stripe.error.SignatureVerificationError:\n+        return JsonResponse({'error': 'Invalid signature'}, status=400)\n+    \n+    if event.type == 'payment_intent.succeeded':\n+        payment_intent = event.data.object\n+        order_id = payment_intent.metadata.order_id\n+        payment = Payment.objects.get(stripe_payment_id=payment_intent.id)\n+        payment.status = 'completed'\n+        payment.save()\n+    \n+    return JsonResponse({'success': True})"
    }
  ]
}
